
export async function processAudioWithAuphonic(audioDataUrl: string, title: string): Promise<string | null> {
  console.log('=== Processing audio with Auphonic ===');
  
  const auphonicApiKey = Deno.env.get('AUPHONIC_API_KEY');
  if (!auphonicApiKey) {
    console.log('Auphonic API key not found, skipping audio post-processing');
    return audioDataUrl; // Return original audio if no Auphonic key
  }

  try {
    console.log('Creating Auphonic production...');
    
    // Convert base64 audio to blob for upload
    const base64Data = audioDataUrl.split(',')[1];
    const audioBlob = new Uint8Array(
      atob(base64Data)
        .split('')
        .map(char => char.charCodeAt(0))
    );

    // Create a new production
    const createResponse = await fetch('https://auphonic.com/api/productions.json', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${auphonicApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        metadata: {
          title: title,
          subtitle: 'Generated by Podume',
          summary: `Professional podcast generated from LinkedIn profile: ${title}`,
        },
        algorithms: {
          leveler: true,
          normloudness: true,
          denoise: true,
          gate: true,
        },
        output_files: [
          {
            format: 'mp3',
            bitrate: '192',
            mono_mixdown: false,
          }
        ],
      }),
    });

    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      console.error('Auphonic production creation failed:', createResponse.status, errorText);
      return audioDataUrl; // Return original on error
    }

    const production = await createResponse.json();
    console.log('Auphonic production created:', production.data.uuid);

    // Upload audio file
    const uploadFormData = new FormData();
    uploadFormData.append('input_file', new Blob([audioBlob], { type: 'audio/wav' }), 'podcast.wav');

    const uploadResponse = await fetch(`https://auphonic.com/api/production/${production.data.uuid}/upload.json`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${auphonicApiKey}`,
      },
      body: uploadFormData,
    });

    if (!uploadResponse.ok) {
      console.error('Auphonic upload failed:', uploadResponse.status);
      return audioDataUrl;
    }

    // Start production
    const startResponse = await fetch(`https://auphonic.com/api/production/${production.data.uuid}/start.json`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${auphonicApiKey}`,
      },
    });

    if (!startResponse.ok) {
      console.error('Auphonic production start failed:', startResponse.status);
      return audioDataUrl;
    }

    // Poll for completion (simplified - in production you'd want better polling)
    let attempts = 0;
    const maxAttempts = 30; // 5 minutes max wait
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
      
      const statusResponse = await fetch(`https://auphonic.com/api/production/${production.data.uuid}.json`, {
        headers: {
          'Authorization': `Bearer ${auphonicApiKey}`,
        },
      });

      if (statusResponse.ok) {
        const status = await statusResponse.json();
        
        if (status.data.status === 3) { // Completed
          console.log('Auphonic processing completed');
          
          // Get the processed audio download URL
          if (status.data.output_files && status.data.output_files.length > 0) {
            const outputUrl = status.data.output_files[0].download_url;
            console.log('Auphonic processed audio URL:', outputUrl);
            return outputUrl;
          }
        } else if (status.data.status === 4) { // Error
          console.error('Auphonic processing failed');
          break;
        }
      }
      
      attempts++;
    }

    console.log('Auphonic processing timeout or failed, returning original audio');
    return audioDataUrl;

  } catch (error) {
    console.error('Error in Auphonic processing:', error.message);
    return audioDataUrl; // Return original on error
  }
}
