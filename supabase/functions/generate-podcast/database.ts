
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { PodcastRequest } from './types.ts';
import { triggerZapierMCP, notifyZapierCompletion } from './zapier-mcp.ts';

export async function savePodcastToDatabase(
  user: any,
  request: PodcastRequest,
  generatedScript: string
) {
  console.log('Saving podcast to database...');
  console.log('Generated script length:', generatedScript.length);
  console.log('Source type:', request.source_type);
  console.log('LinkedIn URL:', request.linkedin_url || 'Not provided');
  console.log('Will be processed entirely by Zapier MCP workflow');
  
  const supabaseAdminClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
  );

  try {
    // Create the podcast entry with placeholder data - Zapier MCP will update with real content
    const { data, error: insertError } = await supabaseAdminClient
      .from('podcasts')
      .insert({
        user_id: user.id,
        title: request.title || 'Untitled Podcast',
        resume_content: request.resume_content || '',
        package_type: request.package_type || 'core',
        voice_clone: request.voice_clone || false,
        premium_assets: request.premium_assets || false,
        description: `Professional podcast generated from ${request.source_type === 'linkedin_url' ? 'LinkedIn profile' : 'resume'} - ${request.title}`,
        transcript: generatedScript, // Placeholder - will be replaced by Zapier MCP
        audio_url: null, // Will be generated by Zapier MCP workflow
        status: 'processing',
      })
      .select()
      .single();

    if (insertError) {
      console.error('Database insert error:', insertError);
      throw insertError;
    }
    
    console.log('Podcast created successfully with ID:', data.id);
    console.log('Status: processing - Zapier MCP will handle complete generation');
    
    // Enhanced Zapier AI Agent payload
    const zapierPayload = {
      ...data,
      linkedin_url: request.linkedin_url,
      source_type: request.source_type,
    };
    
    // Trigger Zapier AI Agent for complete processing
    await triggerZapierMCP(zapierPayload);
    
    console.log('Zapier AI Agent triggered successfully');
    console.log('The AI Agent will:');
    console.log('1. Extract LinkedIn profile data using LinkedIn API');
    console.log('2. Generate podcast transcript using Claude');
    console.log('3. Generate audio using Deepgram TTS');
    console.log('4. Send results back to zapier-completion webhook');
    
    // The workflow will update the podcast record when complete
    // For now, return the initial record
    return data;
    
  } catch (dbError) {
    console.error('Database operation failed:', dbError);
    throw new Error(`Database error: ${dbError.message}`);
  }
}
